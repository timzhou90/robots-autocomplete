{"version":3,"sources":["serviceWorker.js","components/SearchBox.js","components/Scroll.js","container/App.js","index.js","components/ErrorBoundry.js"],"names":["Boolean","window","location","hostname","match","SearchBox","searchChange","className","type","placeholder","onChange","Scroll","children","style","overflow","height","CardList","lazy","App","useState","robotsArr","setRobotsArr","searchfield","setSearchField","useEffect","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","e","event","preventDefault","target","value","fallback","ErrorBoundry","robots","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","props","state","hasError","error","errorInfo","this","setState","Component"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCFSC,EAdG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aAEhB,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCJXK,EAJD,SAAC,GAAc,IAAbC,EAAY,EAAZA,SACZ,OAAQ,yBAAKC,MAAO,CAAEC,SAAU,SAASC,OAAQ,UAAWH,I,OCE1DI,EAAWC,gBAAK,kBAAM,gCAyCbC,EAvCJ,WAAM,IAAD,EACsBC,mBAAS,IAD/B,mBACLC,EADK,KACMC,EADN,OAE0BF,mBAAS,IAFnC,mBAELG,EAFK,KAEQC,EAFR,KAIZC,qBAAU,WACVC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACF,OAAOR,EAAa,YAAIQ,SAE7B,IAGH,IAKMC,EAAgBV,EAAUW,QAAO,SAAAX,GACnC,OAAOA,EAAUY,KAAKC,cAAcC,SAASZ,EAAYW,kBAK7D,OACI,yBAAK1B,UAAY,MACb,sCACA,kBAAC,EAAD,CAAWD,aAAc,SAAC6B,GAAD,OAdTC,EAc6BD,GAb3CE,sBACNd,EAAea,EAAME,OAAOC,OAFT,IAACH,KAehB,kBAAC,WAAD,CAAUI,SANS,0CAOf,kBAAC,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACzB,EAAD,CAAU0B,OAAQZ,SC/B1Ca,IAASC,OACT,oCAAE,kBAAC,EAAD,OACAC,SAASC,eAAe,SJ0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB,gFKlIbV,E,kDACF,WAAYW,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFV,E,8DAKDC,EAAOC,GAErBC,KAAKC,SAAW,CAAEJ,UAAU,K,+BAI5B,OAAIG,KAAKJ,MAAMC,SAEN,qDAGFG,KAAKL,MAAMxC,a,GAjBC+C,aAqBZlB,Q","file":"static/js/main.33132bf0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n   \r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder=\"search robots\"\r\n                onChange={searchChange}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll =({children})=>{\r\n    return (<div style={{ overflow: 'scroll',height: '700px'}}>{children}</div>)\r\n}\r\n\r\nexport default Scroll;","import React, {useEffect, useState, lazy, Suspense} from 'react';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nconst CardList = lazy(() => import('../components/CardList'));\r\n\r\nconst App =() =>{\r\n    const [robotsArr, setRobotsArr] = useState([]);\r\n    const [searchfield, setSearchField] = useState(\"\");\r\n    \r\n    useEffect(()=>{\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => {\r\n            return setRobotsArr([...users])\r\n        }\r\n    )},[])\r\n\r\n\r\n    const onSearchChange = (event) => {\r\n        event.preventDefault();\r\n        setSearchField(event.target.value)\r\n      }\r\n\r\n    const filteredRobots =robotsArr.filter(robotsArr =>{\r\n        return robotsArr.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n\r\n    const renderLoader = () => <p>Loading...</p>\r\n\r\n    return (\r\n        <div className = \"tc\">\r\n            <h1>Robots</h1>\r\n            <SearchBox searchChange={(e)=>onSearchChange(e)}/>\r\n            <Suspense fallback={renderLoader()}>\r\n                <Scroll>\r\n                    <ErrorBoundry>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundry>\r\n                </Scroll>\r\n            </Suspense>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './container/App';\n\nReactDOM.render(\n<><App/></>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        this.setState = { hasError: true };\r\n    }\r\n\r\n      render() {\r\n        if (this.state.hasError) {\r\n          // You can render any custom fallback UI\r\n          return <h1>Something went wrong.</h1>;\r\n        }\r\n    \r\n        return this.props.children; \r\n      }\r\n}\r\n\r\nexport default ErrorBoundry"],"sourceRoot":""}